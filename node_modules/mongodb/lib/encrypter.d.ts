import type { AutoEncrypter, AutoEncryptionOptions } from './deps';
import { MongoClient, MongoClientOptions } from './mongo_client';
import { Callback } from './utils';
/** @internal */
declare const kInternalClient: unique symbol;
/** @internal */
export interface EncrypterOptions {
    autoEncryption: AutoEncryptionOptions;
    maxPoolSize?: number;
}
/** @internal */
export declare class Encrypter {
    [kInternalClient]: MongoClient | null;
    bypassAutoEncryption: boolean;
    needsConnecting: boolean;
    autoEncrypter: AutoEncrypter;
    constructor(client: MongoClient, uri: string, options: MongoClientOptions);
    getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient;
    connectInternalClient(): Promise<void>;
    close(client: MongoClient, force: boolean, callback: Callback): void;
    static checkForMongoCrypt(): void;
}
export {};
//# sourceMappingURL=encrypter.d.ts.map